/// -------------------------------------------------------------------------------
/// THIS FILE IS ORIGINALLY GENERATED BY redis2go.exe.
/// PLEASE DO NOT MODIFY THIS FILE.
/// -------------------------------------------------------------------------------

package main

import (
	"errors"
	"fmt"

	go_redis_orm "github.com/fananchong/go-redis-orm.v2"
	"github.com/gomodule/redigo/redis"
)

type TestStruct3 struct {
	Key  uint64
	myb  bool
	myf1 float32
	myf2 float64
	myi1 int8
	myi2 int16
	myi3 int32
	myi4 int64
	myi6 uint8
	myi7 uint16
	myi8 uint32
	myi9 uint64
	mys1 string
	mys2 []byte

	__dirtyData               map[string]interface{}
	__dirtyDataForStructFiled map[string]interface{}
	__isLoad                  bool
	__dbKey                   string
	__dbName                  string
	__expire                  uint
}

func NewTestStruct3(dbName string, key uint64) *TestStruct3 {
	return &TestStruct3{
		Key:                       key,
		__dbName:                  dbName,
		__dbKey:                   "TestStruct3:" + fmt.Sprintf("%d", key),
		__dirtyData:               make(map[string]interface{}),
		__dirtyDataForStructFiled: make(map[string]interface{}),
	}
}

// 若访问数据库失败返回-1；若 key 存在返回 1 ，否则返回 0 。
func (this *TestStruct3) HasKey() (int, error) {
	db := go_redis_orm.GetDB(this.__dbName)
	val, err := redis.Int(db.Do("EXISTS", this.__dbKey))
	if err != nil {
		return -1, err
	}
	return val, nil
}

func (this *TestStruct3) Load() error {
	if this.__isLoad == true {
		return errors.New("alreay load!")
	}
	db := go_redis_orm.GetDB(this.__dbName)
	val, err := redis.Values(db.Do("HGETALL", this.__dbKey))
	if err != nil {
		return err
	}
	if len(val) == 0 {
		return go_redis_orm.ERR_ISNOT_EXIST_KEY
	}
	var data struct {
		Myb  bool    `redis:"myb"`
		Myf1 float32 `redis:"myf1"`
		Myf2 float64 `redis:"myf2"`
		Myi1 int8    `redis:"myi1"`
		Myi2 int16   `redis:"myi2"`
		Myi3 int32   `redis:"myi3"`
		Myi4 int64   `redis:"myi4"`
		Myi6 uint8   `redis:"myi6"`
		Myi7 uint16  `redis:"myi7"`
		Myi8 uint32  `redis:"myi8"`
		Myi9 uint64  `redis:"myi9"`
		Mys1 string  `redis:"mys1"`
		Mys2 []byte  `redis:"mys2"`
	}
	if err := redis.ScanStruct(val, &data); err != nil {
		return err
	}
	this.myb = data.Myb
	this.myf1 = data.Myf1
	this.myf2 = data.Myf2
	this.myi1 = data.Myi1
	this.myi2 = data.Myi2
	this.myi3 = data.Myi3
	this.myi4 = data.Myi4
	this.myi6 = data.Myi6
	this.myi7 = data.Myi7
	this.myi8 = data.Myi8
	this.myi9 = data.Myi9
	this.mys1 = data.Mys1
	this.mys2 = data.Mys2
	this.__isLoad = true
	return nil
}

func (this *TestStruct3) Save() error {
	if len(this.__dirtyData) == 0 && len(this.__dirtyDataForStructFiled) == 0 {
		return nil
	}
	for k, _ := range this.__dirtyDataForStructFiled {
		_ = k

	}
	db := go_redis_orm.GetDB(this.__dbName)
	if _, err := db.Do("HMSET", redis.Args{}.Add(this.__dbKey).AddFlat(this.__dirtyData)...); err != nil {
		return err
	}
	if this.__expire != 0 {
		if _, err := db.Do("EXPIRE", this.__dbKey, this.__expire); err != nil {
			return err
		}
	}
	this.__dirtyData = make(map[string]interface{})
	this.__dirtyDataForStructFiled = make(map[string]interface{})
	return nil
}

func (this *TestStruct3) Delete() error {
	db := go_redis_orm.GetDB(this.__dbName)
	_, err := db.Do("DEL", this.__dbKey)
	if err == nil {
		this.__isLoad = false
		this.__dirtyData = make(map[string]interface{})
		this.__dirtyDataForStructFiled = make(map[string]interface{})
	}
	return err
}

func (this *TestStruct3) IsLoad() bool {
	return this.__isLoad
}

func (this *TestStruct3) Expire(v uint) {
	this.__expire = v
}

func (this *TestStruct3) GetMyb() bool {
	return this.myb
}

func (this *TestStruct3) GetMyf1() float32 {
	return this.myf1
}

func (this *TestStruct3) GetMyf2() float64 {
	return this.myf2
}

func (this *TestStruct3) GetMyi1() int8 {
	return this.myi1
}

func (this *TestStruct3) GetMyi2() int16 {
	return this.myi2
}

func (this *TestStruct3) GetMyi3() int32 {
	return this.myi3
}

func (this *TestStruct3) GetMyi4() int64 {
	return this.myi4
}

func (this *TestStruct3) GetMyi6() uint8 {
	return this.myi6
}

func (this *TestStruct3) GetMyi7() uint16 {
	return this.myi7
}

func (this *TestStruct3) GetMyi8() uint32 {
	return this.myi8
}

func (this *TestStruct3) GetMyi9() uint64 {
	return this.myi9
}

func (this *TestStruct3) GetMys1() string {
	return this.mys1
}

func (this *TestStruct3) GetMys2() []byte {
	return this.mys2
}

func (this *TestStruct3) SetMyb(value bool) {
	this.myb = value
	this.__dirtyData["myb"] = value
}

func (this *TestStruct3) SetMyf1(value float32) {
	this.myf1 = value
	this.__dirtyData["myf1"] = value
}

func (this *TestStruct3) SetMyf2(value float64) {
	this.myf2 = value
	this.__dirtyData["myf2"] = value
}

func (this *TestStruct3) SetMyi1(value int8) {
	this.myi1 = value
	this.__dirtyData["myi1"] = value
}

func (this *TestStruct3) SetMyi2(value int16) {
	this.myi2 = value
	this.__dirtyData["myi2"] = value
}

func (this *TestStruct3) SetMyi3(value int32) {
	this.myi3 = value
	this.__dirtyData["myi3"] = value
}

func (this *TestStruct3) SetMyi4(value int64) {
	this.myi4 = value
	this.__dirtyData["myi4"] = value
}

func (this *TestStruct3) SetMyi6(value uint8) {
	this.myi6 = value
	this.__dirtyData["myi6"] = value
}

func (this *TestStruct3) SetMyi7(value uint16) {
	this.myi7 = value
	this.__dirtyData["myi7"] = value
}

func (this *TestStruct3) SetMyi8(value uint32) {
	this.myi8 = value
	this.__dirtyData["myi8"] = value
}

func (this *TestStruct3) SetMyi9(value uint64) {
	this.myi9 = value
	this.__dirtyData["myi9"] = value
}

func (this *TestStruct3) SetMys1(value string) {
	this.mys1 = value
	this.__dirtyData["mys1"] = value
}

func (this *TestStruct3) SetMys2(value []byte) {
	this.mys2 = value
	this.__dirtyData["mys2"] = value
}
