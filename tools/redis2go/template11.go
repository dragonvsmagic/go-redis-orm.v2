package main

const template11 string = `/// -------------------------------------------------------------------------------
/// THIS FILE IS ORIGINALLY GENERATED BY redis2go.exe.
/// PLEASE DO NOT MODIFY THIS FILE.
/// -------------------------------------------------------------------------------

package {{packagename}}

import (
	"errors"
	{{fmt}}
	{{fmt_ctructgo}}
	go_redis_orm "github.com/fananchong/go-redis-orm.v2"
	"github.com/gomodule/redigo/redis"
)


type {{classname}} struct {
	Key {{key_type}}
	{{fields_def}}

	__dirtyData map[string]interface{}
	__dirtyDataForStructFiled map[string]interface{}
	__isLoad bool
	__dbKey string
	__dbName string
	__expire uint
}

func New{{classname}}(dbName string, key {{key_type}}) *{{classname}} {
	return &{{classname}} {
		Key: key,
		__dbName: dbName,
		__dbKey: {{func_dbkey}},
		__dirtyData: make(map[string]interface{}),
		__dirtyDataForStructFiled: make(map[string]interface{}),
	}
}

// 若访问数据库失败返回-1；若 key 存在返回 1 ，否则返回 0 。
func (this *{{classname}}) HasKey() (int, error) {
	db := go_redis_orm.GetDB(this.__dbName)
	val, err := redis.Int(db.Do("EXISTS", this.__dbKey))
	if err != nil {
		return -1, err
	}
	return val, nil
}

func (this *{{classname}}) Load() error {
	if this.__isLoad == true {
		return errors.New("alreay load!")
	}
	db := go_redis_orm.GetDB(this.__dbName)
	val, err := redis.Values(db.Do("HGETALL", this.__dbKey))
	if err != nil {
		return err
	}
	if len(val) == 0 {
		return go_redis_orm.ERR_ISNOT_EXIST_KEY
	}
	var data struct {
		{{fields_def_db}}
	}
	if err := redis.ScanStruct(val, &data); err != nil {
		return err
	}
	{{fields_init}}
	this.__isLoad = true
	return nil
}

func (this *{{classname}}) Save() error {
	if len(this.__dirtyData) == 0 && len(this.__dirtyDataForStructFiled) == 0 {
		return nil
	}
	for k,_ := range(this.__dirtyDataForStructFiled) {
		_ = k
		{{fields_save}}
	}
	db := go_redis_orm.GetDB(this.__dbName)
	if _, err := db.Do("HMSET", redis.Args{}.Add(this.__dbKey).AddFlat(this.__dirtyData)...); err != nil {
		return err
	}
	if this.__expire != 0 {
		if _, err := db.Do("EXPIRE", this.__dbKey, this.__expire); err != nil {
			return err
		}
	}
	this.__dirtyData = make(map[string]interface{})
	this.__dirtyDataForStructFiled = make(map[string]interface{})
	return nil
}

func (this *{{classname}}) Delete() error {
	db := go_redis_orm.GetDB(this.__dbName)
	_, err := db.Do("DEL", this.__dbKey)
	if err == nil {
		this.__isLoad = false
		this.__dirtyData = make(map[string]interface{})
		this.__dirtyDataForStructFiled = make(map[string]interface{})
	}
	return err
}

func (this *{{classname}}) IsLoad() bool {
	return this.__isLoad
}

func (this *{{classname}}) Expire(v uint) {
	this.__expire = v
}

func (this *{{classname}}) DirtyData() (map[string]interface{}, error) {
	for k,_ := range(this.__dirtyDataForStructFiled) {
		_ = k
		{{fields_save2}}
	}
	data := make(map[string]interface{})
	for k, v := range(this.__dirtyData) {
		data[k] = v
	}
	this.__dirtyData = make(map[string]interface{})
	this.__dirtyDataForStructFiled = make(map[string]interface{})
	return data, nil
}

func (this *{{classname}}) Save2(dirtyData map[string]interface{}) error {
	if len(dirtyData) == 0 {
		return nil
	}
	db := go_redis_orm.GetDB(this.__dbName)
	if _, err := db.Do("HMSET", redis.Args{}.Add(this.__dbKey).AddFlat(dirtyData)...); err != nil {
		return err
	}
	if this.__expire != 0 {
		if _, err := db.Do("EXPIRE", this.__dbKey, this.__expire); err != nil {
			return err
		}
	}
	return nil
}

{{func_get}}

{{func_set}}`

const getFuncString = `func (this *{{classname}}) Get{{field_name_upper}}() {{field_type}} {
	return this.{{field_name_lower}}
}`

const setFuncString = `func (this *{{classname}}) Set{{field_name_upper}}(value {{field_type}}) {
	this.{{field_name_lower}} = value
	this.__dirtyData["{{field_name_lower_all}}"] = value
}`

const setFuncString_fieldstring = `func (this *{{classname}}) Set{{field_name_upper}}(value {{field_type}}) {
	this.{{field_name_lower}} = value
	this.__dirtyData["{{field_name_lower_all}}"] = string([]byte(value))
}`

const setFuncString_fieldbyte = `func (this *{{classname}}) Set{{field_name_upper}}(value {{field_type}}) {
	this.{{field_name_lower}} = value
	var tmp []byte = make([]byte, len(value))
	copy(tmp, value)
	this.__dirtyData["{{field_name_lower_all}}"] = tmp
}`

const getFuncStringForStructFiled = `func (this *{{classname}}) Get{{field_name_upper}}(mutable bool) *{{field_type}} {
	if mutable {
		this.__dirtyDataForStructFiled["{{field_name_lower_all}}"] = nil
	}
	return &this.{{field_name_lower}}
}`

const getFuncStringSave = `if k == "{{field_name_lower_all}}" {
	data, err := cstruct.Marshal(&this.{{field_name_lower}})
	if err != nil {
		return err
	}
	this.__dirtyData["{{field_name_lower_all}}"] = data
}`

const getFuncStringSave2 = `if k == "{{field_name_lower_all}}" {
	data, err := cstruct.Marshal(&this.{{field_name_lower}})
	if err != nil {
		return nil, err
	}
	this.__dirtyData["{{field_name_lower_all}}"] = data
}`

const dbkeyFuncString_int = `"{{classname}}:" + fmt.Sprintf("%d", key)`

const dbkeyFuncString_str = `"{{classname}}:" + key`

