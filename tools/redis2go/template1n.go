package main

const template1n string = `/// -------------------------------------------------------------------------------
/// THIS FILE IS ORIGINALLY GENERATED BY redis2go.exe.
/// PLEASE DO NOT MODIFY THIS FILE.
/// -------------------------------------------------------------------------------
package {{packagename}}

import (
	"errors"
	{{fmt}}
	{{strconv}}

	go_redis_orm "github.com/fananchong/go-redis-orm.v2"
	"github.com/gomodule/redigo/redis"
)

type {{classname}} struct {
	Key         {{key_type}}
	values      map[{{sub_key_type}}]*{{classname}}Item

	__dirtyData map[{{sub_key_type}}]int
	__isLoad    bool
	__dbKey     string
	__dbName    string
	__expire    uint
}

func New{{classname}}(dbName string, key {{key_type}}) *{{classname}} {
	return &{{classname}}{
		Key:         key,
		values:      make(map[{{sub_key_type}}]*{{classname}}Item),
		__dbName:    dbName,
		__dbKey:     {{func_dbkey}},
		__dirtyData: make(map[{{sub_key_type}}]int),
	}
}

// 若访问数据库失败返回-1；若 key 存在返回 1 ，否则返回 0 。
func (this *{{classname}}) HasKey() (int, error) {
	db := go_redis_orm.GetDB(this.__dbName)
	val, err := redis.Int(db.Do("EXISTS", this.__dbKey))
	if err != nil {
		return -1, err
	}
	return val, nil
}

func (this *{{classname}}) Load() error {
	if this.__isLoad == true {
		return errors.New("alreay load!")
	}
	db := go_redis_orm.GetDB(this.__dbName)
	val, err := redis.Values(db.Do("HGETALL", this.__dbKey))
	if err != nil {
		return err
	}
	if len(val) == 0 {
		return go_redis_orm.ERR_ISNOT_EXIST_KEY
	}
	for i := 0; i < len(val); i += 2 {
		temp := string(val[i].([]byte))
		{{conv_subkey}}
		if err != nil {
			return err
		}
		item := New{{classname}}Item(subKey, this)
		err = item.Unmarshal(val[i+1].([]byte))
		if err != nil {
			return err
		}
		this.values[subKey] = item
	}
	this.__isLoad = true
	return nil
}

func (this *{{classname}}) Save() error {
	if len(this.__dirtyData) == 0 {
		return nil
	}
	tempData := make(map[{{sub_key_type}}][]byte)
	for k, _ := range this.__dirtyData {
		if item, ok := this.values[k]; ok {
			var err error
			tempData[k], err = item.Marshal()
			if err != nil {
				return err
			}
		}
	}
	db := go_redis_orm.GetDB(this.__dbName)
	if _, err := db.Do("HMSET", redis.Args{}.Add(this.__dbKey).AddFlat(tempData)...); err != nil {
		return err
	}
	if this.__expire != 0 {
		if _, err := db.Do("EXPIRE", this.__dbKey, this.__expire); err != nil {
			return err
		}
	}
	this.__dirtyData = make(map[{{sub_key_type}}]int)
	return nil
}

func (this *{{classname}}) Delete() error {
	db := go_redis_orm.GetDB(this.__dbName)
	_, err := db.Do("DEL", this.__dbKey)
	if err == nil {
		this.__isLoad = false
		this.__dirtyData = make(map[{{sub_key_type}}]int)
	}
	return err
}

func (this *{{classname}}) NewItem(subKey {{sub_key_type}}) *{{classname}}Item {
	item := New{{classname}}Item(subKey, this)
	this.values[subKey] = item
	this.__dirtyData[subKey] = 1
	return item
}

func (this *{{classname}}) DeleteItem(subKey {{sub_key_type}}) error {
	if _, ok := this.values[subKey]; ok {
		db := go_redis_orm.GetDB(this.__dbName)
		_, err := db.Do("HDEL", this.__dbKey, subKey)
		if err != nil {
			return err
		}
		delete(this.values, subKey)
		if _, ok := this.__dirtyData[subKey]; ok {
			delete(this.__dirtyData, subKey)
		}
	}
	return nil
}

func (this *{{classname}}) GetItem(subKey {{sub_key_type}}) *{{classname}}Item {
	if item, ok := this.values[subKey]; ok {
		return item
	}
	return nil
}

func (this *{{classname}}) GetItems() []*{{classname}}Item {
	var ret []*{{classname}}Item
	for _, v := range this.values {
		ret = append(ret, v)
	}
	return ret
}

func (this *{{classname}}) DirtyData() (map[{{sub_key_type}}][]byte, error) {
	data := make(map[{{sub_key_type}}][]byte)
	for k, _ := range this.__dirtyData {
		if item, ok := this.values[k]; ok {
			var err error
			data[k], err = item.Marshal()
			if err != nil {
				return nil, err
			}
		}
	}
	this.__dirtyData = make(map[{{sub_key_type}}]int)
	return data, nil
}

func (this *{{classname}}) Save2(dirtyData map[{{sub_key_type}}][]byte) error {
	if len(dirtyData) == 0 {
		return nil
	}
	db := go_redis_orm.GetDB(this.__dbName)
	if _, err := db.Do("HMSET", redis.Args{}.Add(this.__dbKey).AddFlat(dirtyData)...); err != nil {
		return err
	}
	if this.__expire != 0 {
		if _, err := db.Do("EXPIRE", this.__dbKey, this.__expire); err != nil {
			return err
		}
	}
	return nil
}

func (this *{{classname}}) IsLoad() bool {
	return this.__isLoad
}

func (this *{{classname}}) Expire(v uint) {
	this.__expire = v
}
`

const convSubKeyFuncString_int = `tempUint64, err := strconv.ParseUint(temp, 10, 64)
subKey := {{sub_key_type}}(tempUint64)`

const convSubKeyFuncString_str = `subKey := temp`

